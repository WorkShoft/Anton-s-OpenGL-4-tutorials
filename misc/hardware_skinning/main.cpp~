/******************************************************************************\
| OpenGL 4 Example Code.                                                       |
| Accompanies written series "Anton's OpenGL 4 Tutorials"                      |
| Email: anton at antongerdelan dot net                                        |
| First version 27 Jan 2014                                                    |
| Copyright Dr Anton Gerdelan, Trinity College Dublin, Ireland.                |
| See individual libraries separate legal notices                              |
|******************************************************************************|
| Particle Systems                                                             |
\******************************************************************************/

#include "gl_utils.h"
#include "maths_funcs.h"
#include <GL/glew.h>		// include GLEW and new version of GL on Windows
#include <GLFW/glfw3.h> // GLFW helper library
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define _USE_MATH_DEFINES
#include <math.h>
#define GL_LOG_FILE "gl.log"


GLuint monkey_vao;
mat4 monkey_bone_offset_matrices[MAX_BONES]
int monkey_point_count = 0;
assert(load_mesh(
		 MESH_FILE,
		 &monkey_vao,
		 &monkey_point_count,
		 monkey_bone_offset_matrices,
		 &monkey_bone_count
		 ));

printf("monkey bone count %i\n", monkey_bone_count);

bool load_mesh (
		const char* file_name,
		GLuint* vao,
		int* point_count,
		mat4* bone_offset_mats,
		int* bone_count		
		){

}

int g_gl_width = 640;
int g_gl_height = 480;
GLFWwindow *g_window = NULL;


int main() {
	restart_gl_log();
	// use GLFW and GLEW to start GL context. see gl_utils.cpp for details
	start_gl();

	glEnable( GL_CULL_FACE );	// cull face
	glCullFace( GL_BACK );		 // cull back face
	glFrontFace( GL_CCW );		 // GL_CCW for counter clock-wise
	glDepthFunc( GL_LESS );		 // depth-testing interprets a smaller value as "closer"
	glEnable( GL_DEPTH_TEST ); // enable depth-testing
	glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );
	glClearColor( 0.2, 0.2, 0.2, 1.0 );
	/* MUST use this is in compatibility profile. doesn't exist in core
	glEnable(GL_POINT_SPRITE);
	*/

	while ( !glfwWindowShouldClose( g_window ) ) {
		static double previous_seconds = glfwGetTime();
		double current_seconds = glfwGetTime();
		double elapsed_seconds = current_seconds - previous_seconds;
		previous_seconds = current_seconds;

		_update_fps_counter( g_window );

		// wipe the drawing surface clear
		glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
		
		glViewport( 0, 0, g_gl_width, g_gl_height );

		/* Render Particles. Enabling point re-sizing in vertex shader */
		glEnable( GL_PROGRAM_POINT_SIZE );
		glPointParameteri( GL_POINT_SPRITE_COORD_ORIGIN, GL_LOWER_LEFT );

		glEnable( GL_BLEND );
		glDepthMask( GL_FALSE );
		glActiveTexture( GL_TEXTURE0 );
		
		
		// update other events like input handling
		glfwPollEvents();


		if ( GLFW_PRESS == glfwGetKey( g_window, GLFW_KEY_ESCAPE ) ) {
			glfwSetWindowShouldClose( g_window, 1 );
		}

		// put the stuff we've been drawing onto the display
		glfwSwapBuffers( g_window );
	}

	// close GL context and any other GLFW resources
	glfwTerminate();
	return 0;
}
